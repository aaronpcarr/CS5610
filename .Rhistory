#Give it a look over
View(heart)
names(heart)
dim(heart)
summary(heart)
#Check to see if there's any missing values
any(is.na(heart))
attach(heart)
table(glm.pred, HeartDisease)
mean(glm.pred == HeartDisease)
#Linear Discriminant Analysis (87%)
lda.fit <- lda(HeartDisease ~ ., data = heart)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, heart)
lda.class <- lda.pred$class
table(lda.class, HeartDisease)
mean(lda.class == HeartDisease)
#Quadradic Discriminant Analysis (86%)
qda.fit <- qda(HeartDisease ~ ., data = heart)
qda.fit
qda.class <- predict(qda.fit, heart)$class
table(qda.class, HeartDisease)
mean(qda.class == HeartDisease)
#Naive Bayes (86%)
nb.fit <- naiveBayes(HeartDisease ~ ., data = heart)
nb.fit
nb.class <- predict(nb.fit, heart)
table(nb.class, HeartDisease)
#Load Dataset
heart <- read.csv("heart.csv")
#Give it a look over
View(heart)
names(heart)
dim(heart)
summary(heart)
#Check to see if there's any missing values
any(is.na(heart))
attach(heart)
set.seed(63)
spl = sample.split(heart$HeartDisease, SplitRatio = 0.75)
library(boot)
library(MASS)
library(e1071)
library(caTools)
#Load Dataset
heart <- read.csv("heart.csv")
#Give it a look over
View(heart)
names(heart)
dim(heart)
summary(heart)
#Check to see if there's any missing values
any(is.na(heart))
attach(heart)
set.seed(63)
spl = sample.split(heart$HeartDisease, SplitRatio = 0.75)
heartTrain = subset(heart, spl==TRUE)
heartTest = subset(heart, spl==FALSE)
?predict
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
summary(glm.fits)
glm.probs <- predict(glm.fits, type = "response")
glm.pred <- rep(0, 918)
glm.pred[glm.probs > .5] = 1
table(glm.pred, HeartDisease)
mean(glm.pred == HeartDisease)
dim(heartTrain)
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
summary(glm.fits)
glm.probs <- predict(glm.fits, type = "response")
glm.pred <- rep(0, 689)
glm.pred[glm.probs > .5] = 1
table(glm.pred, HeartDisease)
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
summary(glm.fits)
glm.probs <- predict(glm.fits, type = "response")
glm.pred <- rep(0, 689)
glm.pred[glm.probs > .5] = 1
table(glm.pred, heartTrain$HeartDisease)
mean(glm.pred == heartTrain$HeartDisease)
dim(heartTrain)
dim(heartTest)
689+229
glm.probs <- predict(glm.fits, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
summary(glm.fits)
i <- glm(HeartDisease ~ 1,
family = binomial, data = heartTrain
)
####Running the model selection algorithm####
summary(step(i, direction='both', scope=formula(glm.fits), trace=0))
i <- glm(HeartDisease ~ 1,
family = binomial, data = heartTrain)
glm.new <- step(i, direction='both', scope=formula(glm.fits), trace=0)
summary(glm.new)
glm.probs <- predict(glm.new, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
glm.probs <- predict(glm.fits, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
#Linear Discriminant Analysis (87%)
lda.fit <- lda(HeartDisease ~ ., data = heartTrain)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, newdata = heartTest)
lda.class <- lda.pred$class
table(lda.class, heartTest$HeartDisease)
mean(lda.class == heartTest$HeartDisease)
#Linear Discriminant Analysis (87%)
lda.fit <- lda(HeartDisease ~ ., data = heart)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, heart)
lda.class <- lda.pred$class
table(lda.class, HeartDisease)
mean(lda.class == HeartDisease)
summary(lda.fit)
lda.fit
#Linear Discriminant Analysis (87%)
lda.fit <- lda(HeartDisease ~ ., data = heartTrain)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, newdata = heartTest)
lda.class <- lda.pred$class
table(lda.class, heartTest$HeartDisease)
mean(lda.class == heartTest$HeartDisease)
#Quadratic Discriminant Analysis (86%)
qda.fit <- qda(HeartDisease ~ ., data = heartTrain)
qda.fit
qda.class <- predict(qda.fit, newdata = heartTest)$class
table(qda.class, heartTest$HeartDisease)
mean(qda.class == heartTest$HeartDisease)
#Naive Bayes (86%)
nb.fit <- naiveBayes(HeartDisease ~ ., data = heartTrain)
nb.fit
nb.class <- predict(nb.fit, newdata = heartTest)
table(nb.class, heartTest$HeartDisease)
length(nb.class)
nb.class
nb.fit
summary(nb.fit)
mean(nb.class == heartTest$HeartDisease)
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(MASS)
library(e1071)
library(caTools)
library(dplyr)
library(tree)
library(randomForest)
#Load Dataset
heart <- read.csv("heart.csv")
heart <- mutate(heart, typical_angina = as.integer(ChestPainType == "TA")) %>%
mutate(atypical_angina = as.integer(ChestPainType == "ATA")) %>%
mutate(non_angina_pain = as.integer(ChestPainType == "NAP")) %>%
mutate(st_abnorm =  as.integer(RestingECG == "ST")) %>%
mutate(left_vent_hypertroph = as.integer(RestingECG == "LVH")) %>%
mutate(ExerciseAngina = as.integer(ExerciseAngina == "Y")) %>%
mutate(stslope_up = as.integer(ST_Slope == "Up")) %>%
mutate(stslope_down = as.integer(ST_Slope == "Down")) %>%
mutate(male = as.integer(Sex == "M")) %>%
select(- c(ChestPainType, RestingECG, ST_Slope, Sex))
#Give it a look over
View(heart)
names(heart)
dim(heart)
summary(heart)
#Check to see if there's any missing values
any(is.na(heart))
set.seed(97)
spl = sample.split(heart$HeartDisease, SplitRatio = 0.75)
heartTrain = subset(heart, spl==TRUE)
heartTest = subset(heart, spl==FALSE)
dim(heartTrain)
dim(heartTest)
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
summary(glm.fits)
glm.probs <- predict(glm.fits, type = "response")
glm.pred <- rep(0, 689)
glm.pred[glm.probs > .5] = 1
table(glm.pred, heartTrain$HeartDisease)
mean(glm.pred == heartTrain$HeartDisease)
glm.probs <- predict(glm.fits, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
##Feature Selection algorithm
i <- glm(HeartDisease ~ 1,
family = binomial, data = heartTrain)
glm.new <- step(i, direction='both', scope=formula(glm.fits), trace=0)
summary(glm.new)
glm.probs <- predict(glm.new, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
library(boot)
library(MASS)
library(e1071)
library(caTools)
library(dplyr)
library(tree)
library(randomForest)
install.packages("randomForest")
install.packages(Rtools)
install.packages("Rtools")
head(heart)
# Plot the `midwest` data set, with college education rate on the x-axis and
# percentage of adult poverty on the y-axis
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
library("ggplot2")          # in each relevant script
?midwest
# Plot the `midwest` data set, with college education rate on the x-axis and
# percentage of adult poverty on the y-axis
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
# A bar chart of the total population of each state
# The `state` is mapped to the x-axis, and the `poptotal` is mapped
# to the y-axis
ggplot(data = midwest) +
geom_col(mapping = aes(x = state, y = poptotal))
ggplot(data = heart) +
geom_col(mapping = aes(x = male, y = HeartDisease))
sum(heart$male)
sum(heart$HeartDisease)
heart2 <- read.csv("heart.csv")
head(heart2)
ggplot(data = heart2) +
geom_col(mapping = aes(x = Sex, y = HeartDisease))
heart2 %>% filter(Sex == "F") %>% sum(HeartDisease)
heart2 %>% filter(Sex == "F")
f = heart2 %>% filter(Sex == "F")
sum(f$HeartDisease)
ggplot(data = heart2) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
ggplot(data = heart2) +
+ geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
ggplot(data = heart2) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
heart_copy = read.csv("heart.csv")
ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
head(heart_copy)
ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex))
sum(1-f$HeartDisease)
dim(f)
library(gridExtra)
heart_copy = read.csv("heart.csv")
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
heart_copy = read.csv("heart.csv")
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex))
heart_copy = read.csv("heart.csv")
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex))
grid.arrange(one,zero, ncol= 2)
heart_copy = read.csv("heart.csv")
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex))
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex)) + labs(y = "Non-Heart Disease")
grid.arrange(one,zero, ncol= 2)
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex)) + labs(y = "Heart Disease")
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex)) + labs(y = "Non-Heart Disease")
grid.arrange(one,zero, ncol= 2)
head(heart_copy)
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = Sex)) + labs(y = "Non-Heart Disease")
ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = Sex)) + labs(y = "Non-Heart Disease")
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y =  HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
grid.arrange(one,zero, ncol= 2)
one
zero
grid.arrange(one,zero, ncol= 2)
one = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = HeartDisease, fill = Sex)) + labs(y = "Heart Disease")
zero = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = Sex, y = 1 - HeartDisease, fill = Sex)) + labs(y = "Non-Heart Disease")
grid.arrange(one,zero, ncol= 2)
two = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
three = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
grid.arrange(one,zero, ncol= 2)
two = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
three = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
grid.arrange(two,three, ncol= 2)
two = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
three = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
grid.arrange(two,three, ncol= 2)
ggplot(data = heart_copy) +
geom_point(mapping = aes(x = Cholesterol, y = 1 - HeartDisease, )) + labs(y = "Non-Heart Disease")
geom_point(mapping = aes(y = Cholesterol, x = HeartDisease, )) + labs(y = "Non-Heart Disease")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = HeartDisease))
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = HeartDisease))
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease))
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease))
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease))) +  +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
two = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
three = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
grid.arrange(two,three, ncol= 2)
two = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = HeartDisease, fill = ChestPainType)) + labs(y = "Heart Disease")
three = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ChestPainType, y = 1 - HeartDisease, fill = ChestPainType)) + labs(y = "Non-Heart Disease")
grid.arrange(two,three, ncol= 2)
ggplot(data = heart_copy) +
+  geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(MASS)
library(e1071)
library(caTools)
library(dplyr)
library(tree)
library(randomForest)
#Load Dataset
heart <- read.csv("heart.csv")
heart_copy = read.csv("heart.csv")
heart <- mutate(heart, typical_angina = as.integer(ChestPainType == "TA")) %>%
mutate(atypical_angina = as.integer(ChestPainType == "ATA")) %>%
mutate(non_angina_pain = as.integer(ChestPainType == "NAP")) %>%
mutate(st_abnorm =  as.integer(RestingECG == "ST")) %>%
mutate(left_vent_hypertroph = as.integer(RestingECG == "LVH")) %>%
mutate(ExerciseAngina = as.integer(ExerciseAngina == "Y")) %>%
mutate(stslope_up = as.integer(ST_Slope == "Up")) %>%
mutate(stslope_down = as.integer(ST_Slope == "Down")) %>%
mutate(male = as.integer(Sex == "M")) %>%
select(- c(ChestPainType, RestingECG, ST_Slope, Sex))
#Give it a look over
View(heart)
names(heart)
dim(heart)
summary(heart)
#Check to see if there's any missing values
any(is.na(heart))
set.seed(97)
spl = sample.split(heart$HeartDisease, SplitRatio = 0.75)
heartTrain = subset(heart, spl==TRUE)
heartTest = subset(heart, spl==FALSE)
dim(heartTrain)
dim(heartTest)
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)", legend = c("Yes","No"))
library(boot)
library(MASS)
library(e1071)
library(caTools)
library(dplyr)
library(tree)
library(gbm)
library(ggplot2)
library(gridExtra)
library(randomForest)
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)", legend = c("Yes","No"))
?labs
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)", lables = c("No","Yes"))
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)", labels = c("No","Yes"))
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)") +
labels = c("No","Yes")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labels = c("No","Yes")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease)))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease, labels = c("No","Yes"))))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease (1 = Heart Disease)")
ggplot(data = heart_copy) +
geom_point(mapping = aes(y = Cholesterol, x = Age, color = factor(HeartDisease, labels = c("No","Yes"))))   +
scale_color_brewer(palette = "Set1") +
labs(color = "Heart Disease")
head(heart_copy)
four = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = RestingECG, y = HeartDisease, fill = RestingECG)) + labs(y = "Heart Disease")
five = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = RestingECG, y = 1 - HeartDisease, fill = RestingECG)) + labs(y = "Non-Heart Disease")
grid.arrange(four,five, ncol= 2)
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
#Logistic Regression (87%)
glm.fits <- glm(HeartDisease ~ .,
family = binomial, data = heartTrain
)
cv.err <- cv.glm(heartTrain, glm.fits)
cv.err$delta
summary(glm.fits)
glm.probs <- predict(glm.fits, type = "response")
glm.pred <- rep(0, 689)
glm.pred[glm.probs > .5] = 1
table(glm.pred, heartTrain$HeartDisease)
mean(glm.pred == heartTrain$HeartDisease)
glm.probs <- predict(glm.fits, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
##Feature Selection algorithm
i <- glm(HeartDisease ~ 1,
family = binomial, data = heartTrain)
glm.new <- step(i, direction='both', scope=formula(glm.fits), trace=0)
summary(glm.new)
glm.probs <- predict(glm.new, type = "response", newdata = heartTest)
glm.predTest <- rep(0, 229)
glm.predTest[glm.probs > .5] = 1
table(glm.predTest, heartTest$HeartDisease)
mean(glm.predTest == heartTest$HeartDisease)
head(heart_copy)
six = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ST_Slope, y = HeartDisease, fill = ST_Slope)) + labs(y = "Heart Disease")
seven = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ST_Slope, y = 1 - HeartDisease, fill = ST_Slope)) + labs(y = "Non-Heart Disease")
grid.arrange(six,seven, ncol= 2)
eight = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ExerciseAngina, y = HeartDisease, fill = ExerciseAngina)) + labs(y = "Heart Disease")
nine = ggplot(data = heart_copy) +
geom_col(mapping = aes(x = ExerciseAngina, y = 1 - HeartDisease, fill = ExerciseAngina)) + labs(y = "Non-Heart Disease")
grid.arrange(eight,nine, ncol= 2)
